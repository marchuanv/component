function Factory(){Object.defineProperty(this,"getContainer",{configurable:!1,writable:!1,value:({scopeId:e,type:t,variableName:n,singleton:s})=>{s=s?"global":e;if(!s)throw new Error("Factory: no scopeId provided.");let a=containers[s];a||(a=[],containers[s]=a);e=a.find(e=>e.name===n&&e.type.name===t.name);if(e)return e;const o={references:{},Id:utils.generateGUID(),type:t,name:n,scopeId:s,config:({configJson:e})=>{o.references=e},reference:e=>{for(const s of Object.keys(e))o.references[s]||(o.references[s]=e[s])},ensureInstance:()=>{if(o.references[n])return o.references[n];const e={scopeId:o.scopeId};for(const s of Object.keys(o.references))e[s]=o.references[s];console.log(`creating an instance of ${t.name} on the ${o.scopeId} scope.`),o.references[n]=new t(e)}};return a.push(o),o}})}function ClientMessageBus({httpClientRequestMessageBus:s,httpClientResponseMessageBus:e,webSocketClientRequestMessagebus:t,webSocketClientResponseMessageBus:n,messageConverter:a}){s&&e?(Object.defineProperty(this,"publish",{configurable:!1,writable:!1,value:async({message:e})=>{await s.publish(a.convertMessageToHttpRequestMessage({message:e}))}}),Object.defineProperty(this,"subscribe",{configurable:!1,writable:!1,value:({callback:s})=>{e.subscribe({callback:async({httpResponseMessage:e})=>{await s(a.convertHttpResponseMessageToMessage({httpResponseMessage:e}))}})}})):t&&n&&(Object.defineProperty(this,"publish",{configurable:!1,writable:!1,value:async({message:e})=>{await t.publish(a.convertMessageToWebSocketRequestMessage({message:e}))}}),Object.defineProperty(this,"subscribe",{configurable:!1,writable:!1,value:({callback:s})=>{n.subscribe({callback:async({webSocketResponseMessage:e})=>{await s(a.convertWebSocketResponseMessageToMessage({webSocketResponseMessage:e}))}})}}))}function createClientMessageBus({scopeId:e,messageConverter:s,httpClientRequestMessageBus:t,httpClientResponseMessageBus:n,webSocketClientRequestMessagebus:a,webSocketClientResponseMessageBus:o}){const r=factory.getContainer({scopeId:e,type:ClientMessageBus,variableName:"clientMessageBus",singleton:!1});return r.config(new ClientMessageBusCtorParamConfig),r.reference({messageConverter:s,httpClientRequestMessageBus:t,httpClientResponseMessageBus:n,webSocketClientRequestMessagebus:a,webSocketClientResponseMessageBus:o}),r.ensureInstance(),r.references}Factory.prototype.createContainer=function(e){},ClientMessageBus.prototype.publish=async function({}){},ClientMessageBus.prototype.subscribe=function({}){};