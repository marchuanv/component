function Factory() {
    Object.defineProperty(this, 'getInstance', { configurable: false, writable: false, value: ({ scopeId }, { bindings, type, variableName, singleton }) => {
        const { primitiveArgs, referenceArgs } = bindings[scopeId];
        const _scopeId = singleton ? 'global' : scopeId;
        if (!_scopeId) {
            throw new Error('Factory: no scopeId provided.');
        }
        let scopeContainers = containers[_scopeId];
        if (!scopeContainers) {
            scopeContainers = [];
            containers[_scopeId] = scopeContainers;
        }
        const existingScopeContainer = scopeContainers.find(c => c.name === variableName && c.type.name === type.name);
        if (existingScopeContainer) {
            return existingScopeContainer;
        }
        const container = { 
            references: refArgs,
            Id: utils.generateGUID(),
            type,
            name: variableName,
            scopeId: _scopeId,
            instance: null
        };
        console.log(`creating an instance of ${type.name} on the ${scopeId} scope.`);
        container.instance = new type(ctorArgs);
        scopeContainers.push(container);
        return container;
    }});
}
Factory.prototype.createContainer = function(type) {};
;
function ClientMessageBus({ clientRequestMessageBus, clientResponseMessageBus, messageConverter }) {}
ClientMessageBus.prototype.publish = async function({ message }) { };
ClientMessageBus.prototype.subscribe = function ({ callback }) { };
function Component({ scopeId, clientMessageBus, serverMessageBus, userSessions, packageJson }) {}
Component.prototype.initialise = async function({ secret }) {};
Component.prototype.receive = async function({ callback }) { throw new Error('component was not initialised.'); };
Component.prototype.send = async function({ object }) { throw new Error('component was not initialised.'); };
function ContentType({ name }) {}
ContentType.prototype.name = '';
ContentType.prototype.description = '';
function Logger() {}
Logger.prototype.log = function({ date, event }) { };
function Message({ 
    scopeId,
    Id,
    messageContent,
    messageContentMetadata,
    messageMetadata,
    messageStatus
}) {}
Message.prototype.getId = function() {};
Message.prototype.getSenderAddress = function() {};
Message.prototype.getRecipientAddress = function() {};
Message.prototype.getEncryptedContent = function() {};
Message.prototype.getDecryptedContent = function() {};
Message.prototype.getMessageMetadata = function() {};
Message.prototype.getContentMetadata = function() {};
Message.prototype.getMessageStatus = function() {};
function MessageContent({ data, userSessions, messageMetadata, messageContentMetadata }) {}
MessageContent.prototype.encryptedData = function() { };
MessageContent.prototype.decryptedData = function() { };
function MessageContentMetadata({ scopeId, data }) {}
MessageContentMetadata.prototype.contentType = '';
MessageContentMetadata.prototype.contentLength = -1;
MessageContentMetadata.prototype.isEncrypted = '';
function MessageConverter() {}
MessageConverter.prototype.convertMessageToHttpRequestMessage = function({ message }) {};
MessageConverter.prototype.convertMessageToHttpResponseMessage = function({ message }) {};
MessageConverter.prototype.convertHttpRequestMessageToMessage = function({ httpRequestMessage }) {};
MessageConverter.prototype.convertHttpResponseMessageToMessage = function({ httpResponseMessage }) {};
function MessageMetadata({ metadata, token, senderAddress, recipientAddress }) {}
MessageMetadata.prototype.create = function({ name, value }) {};
function MessageQueue({ logger }) {}
MessageQueue.prototype.queueMessage = function({ message, queueName }) { };
MessageQueue.prototype.dequeueMessage = function ({ queueName }) { };
MessageQueue.prototype.peekMessage = function ({ queueName }) { };
MessageQueue.prototype.bind = function ({ queueName }) { };
MessageQueue.prototype.unbind = function ({ queueName }) { };
function MessageStatus({ messageStatusCode }) {}
MessageStatus.prototype.match = function({ wildcard }) {};
MessageStatus.prototype.root = function() {};
function MessageStore() {}
MessageStore.prototype.save = async function({ message }) { };
MessageStore.prototype.get = async function({ messageId }) { };
function RecipientAddress({ recipientHost, recipientPort }) {}
function SenderAddress({ senderHost, senderPort }) {}
function ServerMessageBus({ 
    httpServerResponseMessageBus,
    httpServerRequestMessageBus,
    webSocketServerRequestMessageBus,
    webSocketServerResponseMessageBus,
    messageConverter
}) {}
ServerMessageBus.prototype.publish = async function({ message }) { };
ServerMessageBus.prototype.subscribe = function ({ callback }) { };
function UserSecurity({ userId }) {}
UserSecurity.prototype.isRegistered = function() {};
UserSecurity.prototype.authenticate = function({ secret }) { };
UserSecurity.prototype.isAuthorised = function({ token }) { };
UserSecurity.prototype.register = function({ secret }) { };
UserSecurity.prototype.unregister = function() { };
UserSecurity.prototype.getHashedPassphrase = function() { };
UserSecurity.prototype.getUserId = function() { };
UserSecurity.prototype.getBase64KeyPair = function() {};
UserSecurity.prototype.getKeyPair = function() {};
UserSecurity.prototype.getToken = function() {};
UserSecurity.prototype.encryptObjectToJSON = function({ object }) {};
UserSecurity.prototype.decryptJSONToObject = function({ encryptedJsonStr }) {};
function UserSessions({ scopeId }) {}
UserSessions.prototype.ensureSession = function({ userId }) {};
function HttpClientMessageBus({ 
    scopeId,
    httpClientRequestMessageQueueBinding,
    httpClientResponseMessageQueueBinding,
    httpClientStartMessageQueueBinding,
    httpClientStartedMessageQueueBinding,
    httpClientStopMessageQueueBinding,
    timeout
}) {}
function HttpClientMessageBusManager({ 
    scopeId,
    httpClientStartMessageQueueBinding,
    httpClientStartedMessageQueueBinding,
    httpClientStopMessageQueueBinding
}) {}
function HttpClientRequestMessageBus({ httpClientRequestMessageQueueBinding }) {}
HttpClientRequestMessageBus.prototype.publish = function({ httpRequestMessage }) { };
function HttpClientRequestMessageQueueBinding({ scopeId, messageQueue }) {}
function HttpClientResponseMessageBus({ httpClientResponseMessageQueueBinding }) {}
HttpClientResponseMessageBus.prototype.subscribe = function ({ callback }) { };
function HttpClientResponseMessageQueueBinding({ scopeId, messageQueue }) {}
function HttpClientStartedMessageQueueBinding({ scopeId, messageQueue }) {}
function HttpClientStartMessageQueueBinding({ scopeId, messageQueue }) {}
function HttpClientStopMessageQueueBinding({ scopeId, messageQueue }) {}
function HttpClientStoppedMessageQueueBinding({ scopeId, messageQueue }) {}
function HttpRequestMessage({ message }) {}
HttpRequestMessage.prototype.getId = function() {};
HttpRequestMessage.prototype.getEncryptedContent = function() {};
HttpRequestMessage.prototype.getDecryptedContent = function() {};
HttpRequestMessage.prototype.getSenderAddress = function() {};
HttpRequestMessage.prototype.getRecipientAddress = function() {};
HttpRequestMessage.prototype.getContentMetadata = function() {};
HttpRequestMessage.prototype.getMessageMetadata = function() {};
HttpRequestMessage.prototype.getHeaders = function() {};
HttpRequestMessage.prototype.getPath = function() {};
HttpRequestMessage.prototype.getMessageStatus = function() {};
HttpRequestMessage.prototype.getMethod = function() {};
function HttpResponseMessage({ message }) {}
HttpResponseMessage.prototype.getId = function() {};
HttpResponseMessage.prototype.getEncryptedContent = function() {};
HttpResponseMessage.prototype.getDecryptedContent = function() {};
HttpResponseMessage.prototype.getSenderAddress = function() {};
HttpResponseMessage.prototype.getRecipientAddress = function() {};
HttpResponseMessage.prototype.getContentMetadata = function() {};
HttpResponseMessage.prototype.getMessageMetadata = function() {};
HttpResponseMessage.prototype.getHeaders = function() {};
HttpResponseMessage.prototype.getMessageStatus = function() {};
HttpResponseMessage.prototype.getStatusCode = function() {};
HttpResponseMessage.prototype.getStatusMessage = function() {};
function HttpServerMessageBus({ 
    scopeId,
    httpServerRequestMessageQueueBinding,
    httpServerResponseMessageQueueBinding,
    httpServerStartMessageQueueBinding,
    httpServerStartedMessageQueueBinding,
    httpServerStopMessageQueueBinding,
    httpServerStoppedMessageQueueBinding,
    senderAddress,
    logger,
    timeout
}) {}
function HttpServerMessageBusManager({ 
    scopeId,
    httpServerRequestMessageQueueBinding,
    httpServerResponseMessageQueueBinding,
    httpServerStartMessageQueueBinding,
    httpServerStartedMessageQueueBinding,
    httpServerStopMessageQueueBinding,
    httpServerStoppedMessageQueueBinding
}) {}
function HttpServerRequestMessageBus({ httpServerRequestMessageQueueBinding }) {}
HttpServerRequestMessageBus.prototype.subscribe = function ({ callback }) { };
function HttpServerRequestMessageQueueBinding({ scopeId, messageQueue }) {}
function HttpServerResponseMessageBus({ httpServerResponseMessageQueueBinding }) {}
HttpServerResponseMessageBus.prototype.publish = async function({ httpResponseMessage }) { };
function HttpServerResponseMessageQueueBinding({ scopeId, messageQueue }) {}
function HttpServerStartedMessageQueueBinding({ scopeId, messageQueue }) {}
function HttpServerStartMessageQueueBinding({ scopeId, messageQueue }) {}
function HttpServerStopMessageQueueBinding({ scopeId, messageQueue }) {}
function HttpServerStoppedMessageQueueBinding({ scopeId, messageQueue }) {
    messageQueue.bind({ bindingObj: this, scopeId });
}
function WebSocketClientRequestMessageBus({ websocketClientRequestMessageQueueBinding }) {}
WebSocketClientRequestMessageBus.prototype.publish = function({ websocketRequestMessage }) { };
function WebSocketClientRequestMessageQueueBinding({ scopeId, messageQueue }) {}
function WebSocketClientResponseMessageBus({ websocketClientResponseMessageQueueBinding }) {}
WebSocketClientResponseMessageBus.prototype.subscribe = function ({ callback }) { };
function WebSocketClientResponseMessageQueueBinding({ scopeId, messageQueue }) {}
function WebSocketRequestMessage({ message }) {}
function WebSocketResponseMessage({ message }) {
    
}
WebSocketResponseMessage.prototype.something = function() {};
function WebSocketServerRequestMessageBus({ webSocketServerRequestMessageQueueBinding }) {}
WebSocketServerRequestMessageBus.prototype.subscribe = function ({ callback }) { };
function WebSocketServerRequestMessageQueueBinding({ scopeId, messageQueue }) {}
function WebSocketServerResponseMessageBus({ webSocketServerResponseMessageQueueBinding }) {}
WebSocketServerResponseMessageBus.prototype.publish = async function({ httpResponseMessage }) { };
function WebSocketServerResponseMessageQueueBinding({ scopeId, messageQueue }) {}
 
function createClientMessageBus({{
    "scopeId": null,
    "clientRequestMessageBus": null,
    "clientResponseMessageBus": null
}}) {
    const args = {{
    "scopeId": null,
    "clientRequestMessageBus": null,
    "clientResponseMessageBus": null
}};
    for(const key of Object.keys(args)) {
        ClientMessageBusFactoryConfig.ctorArgs[key] = args[key];
    };
    const container = factory.getContainer(ClientMessageBusFactoryConfig);
        
    container.ensureInstance();
    return container.references;
}
 
function createComponent({{
    "scopeId": null,
    "packageJson": null,
    "clientRequestMessageBus": null,
    "clientResponseMessageBus": null
}}) {
    const args = {{
    "scopeId": null,
    "packageJson": null,
    "clientRequestMessageBus": null,
    "clientResponseMessageBus": null
}};
    for(const key of Object.keys(args)) {
        ComponentFactoryConfig.ctorArgs[key] = args[key];
    };
    const container = factory.getContainer(ComponentFactoryConfig);
        
    container.ensureInstance();
    return container.references;
}
 
function createContentType({{
    "scopeId": null,
    "name": null
}}) {
    const args = {{
    "scopeId": null,
    "name": null
}};
    for(const key of Object.keys(args)) {
        ContentTypeFactoryConfig.ctorArgs[key] = args[key];
    };
    const container = factory.getContainer(ContentTypeFactoryConfig);
        
    container.ensureInstance();
    return container.references;
}
 
function createLogger({{
    "scopeId": null
}}) {
    const args = {{
    "scopeId": null
}};
    for(const key of Object.keys(args)) {
        LoggerFactoryConfig.ctorArgs[key] = args[key];
    };
    const container = factory.getContainer(LoggerFactoryConfig);
        
    container.ensureInstance();
    return container.references;
}
 
function createMessage({{
    "scopeId": null,
    "messageStatusCode": null,
    "Id": null,
    "data": null,
    "recipientHost": null,
    "recipientPort": null,
    "metadata": null,
    "token": null,
    "senderHost": null,
    "senderPort": null
}}) {
    const args = {{
    "scopeId": null,
    "messageStatusCode": null,
    "Id": null,
    "data": null,
    "recipientHost": null,
    "recipientPort": null,
    "metadata": null,
    "token": null,
    "senderHost": null,
    "senderPort": null
}};
    for(const key of Object.keys(args)) {
        MessageFactoryConfig.ctorArgs[key] = args[key];
    };
    const container = factory.getContainer(MessageFactoryConfig);
        
    container.ensureInstance();
    return container.references;
}
 
function createMessageContent({{
    "scopeId": null,
    "data": null,
    "recipientHost": null,
    "recipientPort": null,
    "metadata": null,
    "token": null,
    "senderHost": null,
    "senderPort": null
}}) {
    const args = {{
    "scopeId": null,
    "data": null,
    "recipientHost": null,
    "recipientPort": null,
    "metadata": null,
    "token": null,
    "senderHost": null,
    "senderPort": null
}};
    for(const key of Object.keys(args)) {
        MessageContentFactoryConfig.ctorArgs[key] = args[key];
    };
    const container = factory.getContainer(MessageContentFactoryConfig);
        
    container.ensureInstance();
    return container.references;
}
 
function createMessageContentMetadata({{
    "scopeId": null,
    "data": null
}}) {
    const args = {{
    "scopeId": null,
    "data": null
}};
    for(const key of Object.keys(args)) {
        MessageContentMetadataFactoryConfig.ctorArgs[key] = args[key];
    };
    const container = factory.getContainer(MessageContentMetadataFactoryConfig);
        
    container.ensureInstance();
    return container.references;
}
 
function createMessageConverter({{
    "scopeId": null
}}) {
    const args = {{
    "scopeId": null
}};
    for(const key of Object.keys(args)) {
        MessageConverterFactoryConfig.ctorArgs[key] = args[key];
    };
    const container = factory.getContainer(MessageConverterFactoryConfig);
        
    container.ensureInstance();
    return container.references;
}
 
function createMessageMetadata({{
    "scopeId": null,
    "recipientHost": null,
    "recipientPort": null,
    "metadata": null,
    "token": null,
    "senderHost": null,
    "senderPort": null
}}) {
    const args = {{
    "scopeId": null,
    "recipientHost": null,
    "recipientPort": null,
    "metadata": null,
    "token": null,
    "senderHost": null,
    "senderPort": null
}};
    for(const key of Object.keys(args)) {
        MessageMetadataFactoryConfig.ctorArgs[key] = args[key];
    };
    const container = factory.getContainer(MessageMetadataFactoryConfig);
        
    container.ensureInstance();
    return container.references;
}
 
function createMessageQueue({{
    "scopeId": null
}}) {
    const args = {{
    "scopeId": null
}};
    for(const key of Object.keys(args)) {
        MessageQueueFactoryConfig.ctorArgs[key] = args[key];
    };
    const container = factory.getContainer(MessageQueueFactoryConfig);
        
    container.ensureInstance();
    return container.references;
}
 
function createMessageStatus({{
    "scopeId": null,
    "messageStatusCode": null
}}) {
    const args = {{
    "scopeId": null,
    "messageStatusCode": null
}};
    for(const key of Object.keys(args)) {
        MessageStatusFactoryConfig.ctorArgs[key] = args[key];
    };
    const container = factory.getContainer(MessageStatusFactoryConfig);
        
    container.ensureInstance();
    return container.references;
}
 
function createMessageStore({{
    "scopeId": null
}}) {
    const args = {{
    "scopeId": null
}};
    for(const key of Object.keys(args)) {
        MessageStoreFactoryConfig.ctorArgs[key] = args[key];
    };
    const container = factory.getContainer(MessageStoreFactoryConfig);
        
    container.ensureInstance();
    return container.references;
}
 
function createRecipientAddress({{
    "scopeId": null,
    "recipientHost": null,
    "recipientPort": null
}}) {
    const args = {{
    "scopeId": null,
    "recipientHost": null,
    "recipientPort": null
}};
    for(const key of Object.keys(args)) {
        RecipientAddressFactoryConfig.ctorArgs[key] = args[key];
    };
    const container = factory.getContainer(RecipientAddressFactoryConfig);
        
    container.ensureInstance();
    return container.references;
}
 
function createSenderAddress({{
    "scopeId": null,
    "senderHost": null,
    "senderPort": null
}}) {
    const args = {{
    "scopeId": null,
    "senderHost": null,
    "senderPort": null
}};
    for(const key of Object.keys(args)) {
        SenderAddressFactoryConfig.ctorArgs[key] = args[key];
    };
    const container = factory.getContainer(SenderAddressFactoryConfig);
        
    container.ensureInstance();
    return container.references;
}
 
function createServerMessageBus({{
    "scopeId": null
}}) {
    const args = {{
    "scopeId": null
}};
    for(const key of Object.keys(args)) {
        ServerMessageBusFactoryConfig.ctorArgs[key] = args[key];
    };
    const container = factory.getContainer(ServerMessageBusFactoryConfig);
        
    container.ensureInstance();
    return container.references;
}
 
function createUserSecurity({{
    "scopeId": null,
    "userId": null
}}) {
    const args = {{
    "scopeId": null,
    "userId": null
}};
    for(const key of Object.keys(args)) {
        UserSecurityFactoryConfig.ctorArgs[key] = args[key];
    };
    const container = factory.getContainer(UserSecurityFactoryConfig);
        
    container.ensureInstance();
    return container.references;
}
 
function createUserSessions({{
    "scopeId": null
}}) {
    const args = {{
    "scopeId": null
}};
    for(const key of Object.keys(args)) {
        UserSessionsFactoryConfig.ctorArgs[key] = args[key];
    };
    const container = factory.getContainer(UserSessionsFactoryConfig);
        
    container.ensureInstance();
    return container.references;
}
 
function createHttpClientMessageBus({{
    "scopeId": null,
    "timeout": null
}}) {
    const args = {{
    "scopeId": null,
    "timeout": null
}};
    for(const key of Object.keys(args)) {
        HttpClientMessageBusFactoryConfig.ctorArgs[key] = args[key];
    };
    const container = factory.getContainer(HttpClientMessageBusFactoryConfig);
        
    container.ensureInstance();
    return container.references;
}
 
function createHttpClientMessageBusManager({{
    "scopeId": null
}}) {
    const args = {{
    "scopeId": null
}};
    for(const key of Object.keys(args)) {
        HttpClientMessageBusManagerFactoryConfig.ctorArgs[key] = args[key];
    };
    const container = factory.getContainer(HttpClientMessageBusManagerFactoryConfig);
        
    container.ensureInstance();
    return container.references;
}
 
function createHttpClientRequestMessageBus({{
    "scopeId": null
}}) {
    const args = {{
    "scopeId": null
}};
    for(const key of Object.keys(args)) {
        HttpClientRequestMessageBusFactoryConfig.ctorArgs[key] = args[key];
    };
    const container = factory.getContainer(HttpClientRequestMessageBusFactoryConfig);
        
    container.ensureInstance();
    return container.references;
}
 
function createHttpClientRequestMessageQueueBinding({{
    "scopeId": null
}}) {
    const args = {{
    "scopeId": null
}};
    for(const key of Object.keys(args)) {
        HttpClientRequestMessageQueueBindingFactoryConfig.ctorArgs[key] = args[key];
    };
    const container = factory.getContainer(HttpClientRequestMessageQueueBindingFactoryConfig);
        
    container.ensureInstance();
    return container.references;
}
 
function createHttpClientResponseMessageBus({{
    "scopeId": null
}}) {
    const args = {{
    "scopeId": null
}};
    for(const key of Object.keys(args)) {
        HttpClientResponseMessageBusFactoryConfig.ctorArgs[key] = args[key];
    };
    const container = factory.getContainer(HttpClientResponseMessageBusFactoryConfig);
        
    container.ensureInstance();
    return container.references;
}
 
function createHttpClientResponseMessageQueueBinding({{
    "scopeId": null
}}) {
    const args = {{
    "scopeId": null
}};
    for(const key of Object.keys(args)) {
        HttpClientResponseMessageQueueBindingFactoryConfig.ctorArgs[key] = args[key];
    };
    const container = factory.getContainer(HttpClientResponseMessageQueueBindingFactoryConfig);
        
    container.ensureInstance();
    return container.references;
}
 
function createHttpClientStartedMessageQueueBinding({{
    "scopeId": null
}}) {
    const args = {{
    "scopeId": null
}};
    for(const key of Object.keys(args)) {
        HttpClientStartedMessageQueueBindingFactoryConfig.ctorArgs[key] = args[key];
    };
    const container = factory.getContainer(HttpClientStartedMessageQueueBindingFactoryConfig);
        
    container.ensureInstance();
    return container.references;
}
 
function createHttpClientStartMessageQueueBinding({{
    "scopeId": null
}}) {
    const args = {{
    "scopeId": null
}};
    for(const key of Object.keys(args)) {
        HttpClientStartMessageQueueBindingFactoryConfig.ctorArgs[key] = args[key];
    };
    const container = factory.getContainer(HttpClientStartMessageQueueBindingFactoryConfig);
        
    container.ensureInstance();
    return container.references;
}
 
function createHttpClientStopMessageQueueBinding({{
    "scopeId": null
}}) {
    const args = {{
    "scopeId": null
}};
    for(const key of Object.keys(args)) {
        HttpClientStopMessageQueueBindingFactoryConfig.ctorArgs[key] = args[key];
    };
    const container = factory.getContainer(HttpClientStopMessageQueueBindingFactoryConfig);
        
    container.ensureInstance();
    return container.references;
}
 
function createHttpClientStoppedMessageQueueBinding({{
    "scopeId": null
}}) {
    const args = {{
    "scopeId": null
}};
    for(const key of Object.keys(args)) {
        HttpClientStoppedMessageQueueBindingFactoryConfig.ctorArgs[key] = args[key];
    };
    const container = factory.getContainer(HttpClientStoppedMessageQueueBindingFactoryConfig);
        
    container.ensureInstance();
    return container.references;
}
 
function createHttpRequestMessage({{
    "scopeId": null,
    "messageStatusCode": null,
    "Id": null,
    "data": null,
    "recipientHost": null,
    "recipientPort": null,
    "metadata": null,
    "token": null,
    "senderHost": null,
    "senderPort": null
}}) {
    const args = {{
    "scopeId": null,
    "messageStatusCode": null,
    "Id": null,
    "data": null,
    "recipientHost": null,
    "recipientPort": null,
    "metadata": null,
    "token": null,
    "senderHost": null,
    "senderPort": null
}};
    for(const key of Object.keys(args)) {
        HttpRequestMessageFactoryConfig.ctorArgs[key] = args[key];
    };
    const container = factory.getContainer(HttpRequestMessageFactoryConfig);
        
    container.ensureInstance();
    return container.references;
}
 
function createHttpResponseMessage({{
    "scopeId": null,
    "messageStatusCode": null,
    "Id": null,
    "data": null,
    "recipientHost": null,
    "recipientPort": null,
    "metadata": null,
    "token": null,
    "senderHost": null,
    "senderPort": null
}}) {
    const args = {{
    "scopeId": null,
    "messageStatusCode": null,
    "Id": null,
    "data": null,
    "recipientHost": null,
    "recipientPort": null,
    "metadata": null,
    "token": null,
    "senderHost": null,
    "senderPort": null
}};
    for(const key of Object.keys(args)) {
        HttpResponseMessageFactoryConfig.ctorArgs[key] = args[key];
    };
    const container = factory.getContainer(HttpResponseMessageFactoryConfig);
        
    container.ensureInstance();
    return container.references;
}
 
function createHttpServerMessageBus({{
    "scopeId": null,
    "timeout": null,
    "senderHost": null,
    "senderPort": null
}}) {
    const args = {{
    "scopeId": null,
    "timeout": null,
    "senderHost": null,
    "senderPort": null
}};
    for(const key of Object.keys(args)) {
        HttpServerMessageBusFactoryConfig.ctorArgs[key] = args[key];
    };
    const container = factory.getContainer(HttpServerMessageBusFactoryConfig);
        
    container.ensureInstance();
    return container.references;
}
 
function createHttpServerMessageBusManager({{
    "scopeId": null
}}) {
    const args = {{
    "scopeId": null
}};
    for(const key of Object.keys(args)) {
        HttpServerMessageBusManagerFactoryConfig.ctorArgs[key] = args[key];
    };
    const container = factory.getContainer(HttpServerMessageBusManagerFactoryConfig);
        
    container.ensureInstance();
    return container.references;
}
 
function createHttpServerRequestMessageBus({{
    "scopeId": null
}}) {
    const args = {{
    "scopeId": null
}};
    for(const key of Object.keys(args)) {
        HttpServerRequestMessageBusFactoryConfig.ctorArgs[key] = args[key];
    };
    const container = factory.getContainer(HttpServerRequestMessageBusFactoryConfig);
        
    container.ensureInstance();
    return container.references;
}
 
function createHttpServerRequestMessageQueueBinding({{
    "scopeId": null
}}) {
    const args = {{
    "scopeId": null
}};
    for(const key of Object.keys(args)) {
        HttpServerRequestMessageQueueBindingFactoryConfig.ctorArgs[key] = args[key];
    };
    const container = factory.getContainer(HttpServerRequestMessageQueueBindingFactoryConfig);
        
    container.ensureInstance();
    return container.references;
}
 
function createHttpServerResponseMessageBus({{
    "scopeId": null
}}) {
    const args = {{
    "scopeId": null
}};
    for(const key of Object.keys(args)) {
        HttpServerResponseMessageBusFactoryConfig.ctorArgs[key] = args[key];
    };
    const container = factory.getContainer(HttpServerResponseMessageBusFactoryConfig);
        
    container.ensureInstance();
    return container.references;
}
 
function createHttpServerResponseMessageQueueBinding({{
    "scopeId": null
}}) {
    const args = {{
    "scopeId": null
}};
    for(const key of Object.keys(args)) {
        HttpServerResponseMessageQueueBindingFactoryConfig.ctorArgs[key] = args[key];
    };
    const container = factory.getContainer(HttpServerResponseMessageQueueBindingFactoryConfig);
        
    container.ensureInstance();
    return container.references;
}
 
function createHttpServerStartedMessageQueueBinding({{
    "scopeId": null
}}) {
    const args = {{
    "scopeId": null
}};
    for(const key of Object.keys(args)) {
        HttpServerStartedMessageQueueBindingFactoryConfig.ctorArgs[key] = args[key];
    };
    const container = factory.getContainer(HttpServerStartedMessageQueueBindingFactoryConfig);
        
    container.ensureInstance();
    return container.references;
}
 
function createHttpServerStartMessageQueueBinding({{
    "scopeId": null
}}) {
    const args = {{
    "scopeId": null
}};
    for(const key of Object.keys(args)) {
        HttpServerStartMessageQueueBindingFactoryConfig.ctorArgs[key] = args[key];
    };
    const container = factory.getContainer(HttpServerStartMessageQueueBindingFactoryConfig);
        
    container.ensureInstance();
    return container.references;
}
 
function createHttpServerStopMessageQueueBinding({{
    "scopeId": null
}}) {
    const args = {{
    "scopeId": null
}};
    for(const key of Object.keys(args)) {
        HttpServerStopMessageQueueBindingFactoryConfig.ctorArgs[key] = args[key];
    };
    const container = factory.getContainer(HttpServerStopMessageQueueBindingFactoryConfig);
        
    container.ensureInstance();
    return container.references;
}
 
function createHttpServerStoppedMessageQueueBinding({{
    "scopeId": null
}}) {
    const args = {{
    "scopeId": null
}};
    for(const key of Object.keys(args)) {
        HttpServerStoppedMessageQueueBindingFactoryConfig.ctorArgs[key] = args[key];
    };
    const container = factory.getContainer(HttpServerStoppedMessageQueueBindingFactoryConfig);
        
    container.ensureInstance();
    return container.references;
}
 
function createWebSocketClientRequestMessageBus({{
    "scopeId": null
}}) {
    const args = {{
    "scopeId": null
}};
    for(const key of Object.keys(args)) {
        WebSocketClientRequestMessageBusFactoryConfig.ctorArgs[key] = args[key];
    };
    const container = factory.getContainer(WebSocketClientRequestMessageBusFactoryConfig);
        
    container.ensureInstance();
    return container.references;
}
 
function createWebSocketClientRequestMessageQueueBinding({{
    "scopeId": null
}}) {
    const args = {{
    "scopeId": null
}};
    for(const key of Object.keys(args)) {
        WebSocketClientRequestMessageQueueBindingFactoryConfig.ctorArgs[key] = args[key];
    };
    const container = factory.getContainer(WebSocketClientRequestMessageQueueBindingFactoryConfig);
        
    container.ensureInstance();
    return container.references;
}
 
function createWebSocketClientResponseMessageBus({{
    "scopeId": null
}}) {
    const args = {{
    "scopeId": null
}};
    for(const key of Object.keys(args)) {
        WebSocketClientResponseMessageBusFactoryConfig.ctorArgs[key] = args[key];
    };
    const container = factory.getContainer(WebSocketClientResponseMessageBusFactoryConfig);
        
    container.ensureInstance();
    return container.references;
}
 
function createWebSocketClientResponseMessageQueueBinding({{
    "scopeId": null
}}) {
    const args = {{
    "scopeId": null
}};
    for(const key of Object.keys(args)) {
        WebSocketClientResponseMessageQueueBindingFactoryConfig.ctorArgs[key] = args[key];
    };
    const container = factory.getContainer(WebSocketClientResponseMessageQueueBindingFactoryConfig);
        
    container.ensureInstance();
    return container.references;
}
 
function createWebSocketRequestMessage({{
    "scopeId": null,
    "messageStatusCode": null,
    "Id": null,
    "data": null,
    "recipientHost": null,
    "recipientPort": null,
    "metadata": null,
    "token": null,
    "senderHost": null,
    "senderPort": null
}}) {
    const args = {{
    "scopeId": null,
    "messageStatusCode": null,
    "Id": null,
    "data": null,
    "recipientHost": null,
    "recipientPort": null,
    "metadata": null,
    "token": null,
    "senderHost": null,
    "senderPort": null
}};
    for(const key of Object.keys(args)) {
        WebSocketRequestMessageFactoryConfig.ctorArgs[key] = args[key];
    };
    const container = factory.getContainer(WebSocketRequestMessageFactoryConfig);
        
    container.ensureInstance();
    return container.references;
}
 
function createWebSocketResponseMessage({{
    "scopeId": null,
    "messageStatusCode": null,
    "Id": null,
    "data": null,
    "recipientHost": null,
    "recipientPort": null,
    "metadata": null,
    "token": null,
    "senderHost": null,
    "senderPort": null
}}) {
    const args = {{
    "scopeId": null,
    "messageStatusCode": null,
    "Id": null,
    "data": null,
    "recipientHost": null,
    "recipientPort": null,
    "metadata": null,
    "token": null,
    "senderHost": null,
    "senderPort": null
}};
    for(const key of Object.keys(args)) {
        WebSocketResponseMessageFactoryConfig.ctorArgs[key] = args[key];
    };
    const container = factory.getContainer(WebSocketResponseMessageFactoryConfig);
        
    container.ensureInstance();
    return container.references;
}
 
function createWebSocketServerRequestMessageBus({{
    "scopeId": null
}}) {
    const args = {{
    "scopeId": null
}};
    for(const key of Object.keys(args)) {
        WebSocketServerRequestMessageBusFactoryConfig.ctorArgs[key] = args[key];
    };
    const container = factory.getContainer(WebSocketServerRequestMessageBusFactoryConfig);
        
    container.ensureInstance();
    return container.references;
}
 
function createWebSocketServerRequestMessageQueueBinding({{
    "scopeId": null
}}) {
    const args = {{
    "scopeId": null
}};
    for(const key of Object.keys(args)) {
        WebSocketServerRequestMessageQueueBindingFactoryConfig.ctorArgs[key] = args[key];
    };
    const container = factory.getContainer(WebSocketServerRequestMessageQueueBindingFactoryConfig);
        
    container.ensureInstance();
    return container.references;
}
 
function createWebSocketServerResponseMessageBus({{
    "scopeId": null
}}) {
    const args = {{
    "scopeId": null
}};
    for(const key of Object.keys(args)) {
        WebSocketServerResponseMessageBusFactoryConfig.ctorArgs[key] = args[key];
    };
    const container = factory.getContainer(WebSocketServerResponseMessageBusFactoryConfig);
        
    container.ensureInstance();
    return container.references;
}
 
function createWebSocketServerResponseMessageQueueBinding({{
    "scopeId": null
}}) {
    const args = {{
    "scopeId": null
}};
    for(const key of Object.keys(args)) {
        WebSocketServerResponseMessageQueueBindingFactoryConfig.ctorArgs[key] = args[key];
    };
    const container = factory.getContainer(WebSocketServerResponseMessageQueueBindingFactoryConfig);
        
    container.ensureInstance();
    return container.references;
}
