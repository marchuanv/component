const { Factory } = require('../factory.js');
const { [TypeName]FactoryContainer } = require('[ContainerScriptPath]');
const { [TypeName] } = require('[ScriptPath]');
[FactoryRequireScripts]

const factory = new Factory([TypeName]FactoryContainer);

/**
* IsSingleton: [TypeName]FactoryContainer.singleton
* Create [TypeName]
* @param {[PrimitiveArgs]}
*/
function create[TypeName]({[PrimitiveArgs]}) {
    const args = {[PrimitiveArgs]};
    const binding = [TypeName]FactoryContainer.bindings[scopeId];
    if (!binding) {
        throw new Error(`no binding found for scope: ${scopeId}`);
    }
    for(const key of Object.keys(args)) {
        if (binding.primitiveArgs[key]) {
            binding.primitiveArgs[key] = args[key];
        }
    };
    return factory.getInstance({ scopeId });
}
module.exports = { create[TypeName] };
